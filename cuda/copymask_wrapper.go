package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
	"unsafe"
)

// CUDA handle for copymask kernel
var copymask_code cu.Function

// Stores the arguments for copymask kernel invocation
type copymask_args_t struct {
	arg_dst       unsafe.Pointer
	arg_maskLUT   unsafe.Pointer
	arg_valuesLUT unsafe.Pointer
	arg_regions   unsafe.Pointer
	arg_N         int
	argptr        [5]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for copymask kernel invocation
var copymask_args copymask_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	copymask_args.argptr[0] = unsafe.Pointer(&copymask_args.arg_dst)
	copymask_args.argptr[1] = unsafe.Pointer(&copymask_args.arg_maskLUT)
	copymask_args.argptr[2] = unsafe.Pointer(&copymask_args.arg_valuesLUT)
	copymask_args.argptr[3] = unsafe.Pointer(&copymask_args.arg_regions)
	copymask_args.argptr[4] = unsafe.Pointer(&copymask_args.arg_N)
}

// Wrapper for copymask CUDA kernel, asynchronous.
func k_copymask_async(dst unsafe.Pointer, maskLUT unsafe.Pointer, valuesLUT unsafe.Pointer, regions unsafe.Pointer, N int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("copymask")
	}

	copymask_args.Lock()
	defer copymask_args.Unlock()

	if copymask_code == 0 {
		copymask_code = fatbinLoad(copymask_map, "copymask")
	}

	copymask_args.arg_dst = dst
	copymask_args.arg_maskLUT = maskLUT
	copymask_args.arg_valuesLUT = valuesLUT
	copymask_args.arg_regions = regions
	copymask_args.arg_N = N

	args := copymask_args.argptr[:]
	cu.LaunchKernel(copymask_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("copymask")
	}
}

// maps compute capability on PTX code for copymask kernel.
var copymask_map = map[int]string{0: "",
	30: copymask_ptx_30,
	35: copymask_ptx_35,
	37: copymask_ptx_37,
	50: copymask_ptx_50,
	52: copymask_ptx_52,
	53: copymask_ptx_53,
	60: copymask_ptx_60,
	61: copymask_ptx_61,
	70: copymask_ptx_70,
	75: copymask_ptx_75}

// copymask PTX code for various compute capabilities.
const (
	copymask_ptx_30 = `
.version 6.3
.target sm_30
.address_size 64

	// .globl	copymask

.visible .entry copymask(
	.param .u64 copymask_param_0,
	.param .u64 copymask_param_1,
	.param .u64 copymask_param_2,
	.param .u64 copymask_param_3,
	.param .u32 copymask_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<19>;


	ld.param.u64 	%rd3, [copymask_param_0];
	ld.param.u64 	%rd4, [copymask_param_1];
	ld.param.u64 	%rd5, [copymask_param_2];
	ld.param.u64 	%rd6, [copymask_param_3];
	ld.param.u32 	%r2, [copymask_param_4];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_3;

	cvta.to.global.u64 	%rd7, %rd6;
	cvt.s64.s32	%rd1, %r1;
	add.s64 	%rd8, %rd7, %rd1;
	ld.global.u8 	%rs1, [%rd8];
	cvt.u64.u16	%rd9, %rs1;
	and.b64  	%rd2, %rd9, 255;
	cvta.to.global.u64 	%rd10, %rd4;
	cvt.u32.u16	%r9, %rs1;
	and.b32  	%r10, %r9, 255;
	mul.wide.u32 	%rd11, %r10, 4;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.f32 	%f1, [%rd12];
	setp.eq.f32	%p2, %f1, 0f00000000;
	@%p2 bra 	BB0_3;

	cvta.to.global.u64 	%rd13, %rd5;
	shl.b64 	%rd14, %rd2, 2;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.f32 	%f2, [%rd15];
	cvta.to.global.u64 	%rd16, %rd3;
	shl.b64 	%rd17, %rd1, 2;
	add.s64 	%rd18, %rd16, %rd17;
	st.global.f32 	[%rd18], %f2;

BB0_3:
	ret;
}


`
	copymask_ptx_35 = `
.version 6.3
.target sm_35
.address_size 64

	// .globl	copymask

.visible .entry copymask(
	.param .u64 copymask_param_0,
	.param .u64 copymask_param_1,
	.param .u64 copymask_param_2,
	.param .u64 copymask_param_3,
	.param .u32 copymask_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<19>;


	ld.param.u64 	%rd3, [copymask_param_0];
	ld.param.u64 	%rd4, [copymask_param_1];
	ld.param.u64 	%rd5, [copymask_param_2];
	ld.param.u64 	%rd6, [copymask_param_3];
	ld.param.u32 	%r2, [copymask_param_4];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_3;

	cvta.to.global.u64 	%rd7, %rd6;
	cvt.s64.s32	%rd1, %r1;
	add.s64 	%rd8, %rd7, %rd1;
	ld.global.nc.u8 	%rs1, [%rd8];
	cvt.u64.u16	%rd9, %rs1;
	and.b64  	%rd2, %rd9, 255;
	cvta.to.global.u64 	%rd10, %rd4;
	cvt.u32.u16	%r9, %rs1;
	and.b32  	%r10, %r9, 255;
	mul.wide.u32 	%rd11, %r10, 4;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.nc.f32 	%f1, [%rd12];
	setp.eq.f32	%p2, %f1, 0f00000000;
	@%p2 bra 	BB0_3;

	cvta.to.global.u64 	%rd13, %rd5;
	shl.b64 	%rd14, %rd2, 2;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.nc.f32 	%f2, [%rd15];
	cvta.to.global.u64 	%rd16, %rd3;
	shl.b64 	%rd17, %rd1, 2;
	add.s64 	%rd18, %rd16, %rd17;
	st.global.f32 	[%rd18], %f2;

BB0_3:
	ret;
}


`
	copymask_ptx_37 = `
.version 6.3
.target sm_37
.address_size 64

	// .globl	copymask

.visible .entry copymask(
	.param .u64 copymask_param_0,
	.param .u64 copymask_param_1,
	.param .u64 copymask_param_2,
	.param .u64 copymask_param_3,
	.param .u32 copymask_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<19>;


	ld.param.u64 	%rd3, [copymask_param_0];
	ld.param.u64 	%rd4, [copymask_param_1];
	ld.param.u64 	%rd5, [copymask_param_2];
	ld.param.u64 	%rd6, [copymask_param_3];
	ld.param.u32 	%r2, [copymask_param_4];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_3;

	cvta.to.global.u64 	%rd7, %rd6;
	cvt.s64.s32	%rd1, %r1;
	add.s64 	%rd8, %rd7, %rd1;
	ld.global.nc.u8 	%rs1, [%rd8];
	cvt.u64.u16	%rd9, %rs1;
	and.b64  	%rd2, %rd9, 255;
	cvta.to.global.u64 	%rd10, %rd4;
	cvt.u32.u16	%r9, %rs1;
	and.b32  	%r10, %r9, 255;
	mul.wide.u32 	%rd11, %r10, 4;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.nc.f32 	%f1, [%rd12];
	setp.eq.f32	%p2, %f1, 0f00000000;
	@%p2 bra 	BB0_3;

	cvta.to.global.u64 	%rd13, %rd5;
	shl.b64 	%rd14, %rd2, 2;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.nc.f32 	%f2, [%rd15];
	cvta.to.global.u64 	%rd16, %rd3;
	shl.b64 	%rd17, %rd1, 2;
	add.s64 	%rd18, %rd16, %rd17;
	st.global.f32 	[%rd18], %f2;

BB0_3:
	ret;
}


`
	copymask_ptx_50 = `
.version 6.3
.target sm_50
.address_size 64

	// .globl	copymask

.visible .entry copymask(
	.param .u64 copymask_param_0,
	.param .u64 copymask_param_1,
	.param .u64 copymask_param_2,
	.param .u64 copymask_param_3,
	.param .u32 copymask_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<19>;


	ld.param.u64 	%rd3, [copymask_param_0];
	ld.param.u64 	%rd4, [copymask_param_1];
	ld.param.u64 	%rd5, [copymask_param_2];
	ld.param.u64 	%rd6, [copymask_param_3];
	ld.param.u32 	%r2, [copymask_param_4];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_3;

	cvta.to.global.u64 	%rd7, %rd6;
	cvt.s64.s32	%rd1, %r1;
	add.s64 	%rd8, %rd7, %rd1;
	ld.global.nc.u8 	%rs1, [%rd8];
	cvt.u64.u16	%rd9, %rs1;
	and.b64  	%rd2, %rd9, 255;
	cvta.to.global.u64 	%rd10, %rd4;
	cvt.u32.u16	%r9, %rs1;
	and.b32  	%r10, %r9, 255;
	mul.wide.u32 	%rd11, %r10, 4;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.nc.f32 	%f1, [%rd12];
	setp.eq.f32	%p2, %f1, 0f00000000;
	@%p2 bra 	BB0_3;

	cvta.to.global.u64 	%rd13, %rd5;
	shl.b64 	%rd14, %rd2, 2;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.nc.f32 	%f2, [%rd15];
	cvta.to.global.u64 	%rd16, %rd3;
	shl.b64 	%rd17, %rd1, 2;
	add.s64 	%rd18, %rd16, %rd17;
	st.global.f32 	[%rd18], %f2;

BB0_3:
	ret;
}


`
	copymask_ptx_52 = `
.version 6.3
.target sm_52
.address_size 64

	// .globl	copymask

.visible .entry copymask(
	.param .u64 copymask_param_0,
	.param .u64 copymask_param_1,
	.param .u64 copymask_param_2,
	.param .u64 copymask_param_3,
	.param .u32 copymask_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<19>;


	ld.param.u64 	%rd3, [copymask_param_0];
	ld.param.u64 	%rd4, [copymask_param_1];
	ld.param.u64 	%rd5, [copymask_param_2];
	ld.param.u64 	%rd6, [copymask_param_3];
	ld.param.u32 	%r2, [copymask_param_4];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_3;

	cvta.to.global.u64 	%rd7, %rd6;
	cvt.s64.s32	%rd1, %r1;
	add.s64 	%rd8, %rd7, %rd1;
	ld.global.nc.u8 	%rs1, [%rd8];
	cvt.u64.u16	%rd9, %rs1;
	and.b64  	%rd2, %rd9, 255;
	cvta.to.global.u64 	%rd10, %rd4;
	cvt.u32.u16	%r9, %rs1;
	and.b32  	%r10, %r9, 255;
	mul.wide.u32 	%rd11, %r10, 4;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.nc.f32 	%f1, [%rd12];
	setp.eq.f32	%p2, %f1, 0f00000000;
	@%p2 bra 	BB0_3;

	cvta.to.global.u64 	%rd13, %rd5;
	shl.b64 	%rd14, %rd2, 2;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.nc.f32 	%f2, [%rd15];
	cvta.to.global.u64 	%rd16, %rd3;
	shl.b64 	%rd17, %rd1, 2;
	add.s64 	%rd18, %rd16, %rd17;
	st.global.f32 	[%rd18], %f2;

BB0_3:
	ret;
}


`
	copymask_ptx_53 = `
.version 6.3
.target sm_53
.address_size 64

	// .globl	copymask

.visible .entry copymask(
	.param .u64 copymask_param_0,
	.param .u64 copymask_param_1,
	.param .u64 copymask_param_2,
	.param .u64 copymask_param_3,
	.param .u32 copymask_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<19>;


	ld.param.u64 	%rd3, [copymask_param_0];
	ld.param.u64 	%rd4, [copymask_param_1];
	ld.param.u64 	%rd5, [copymask_param_2];
	ld.param.u64 	%rd6, [copymask_param_3];
	ld.param.u32 	%r2, [copymask_param_4];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_3;

	cvta.to.global.u64 	%rd7, %rd6;
	cvt.s64.s32	%rd1, %r1;
	add.s64 	%rd8, %rd7, %rd1;
	ld.global.nc.u8 	%rs1, [%rd8];
	cvt.u64.u16	%rd9, %rs1;
	and.b64  	%rd2, %rd9, 255;
	cvta.to.global.u64 	%rd10, %rd4;
	cvt.u32.u16	%r9, %rs1;
	and.b32  	%r10, %r9, 255;
	mul.wide.u32 	%rd11, %r10, 4;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.nc.f32 	%f1, [%rd12];
	setp.eq.f32	%p2, %f1, 0f00000000;
	@%p2 bra 	BB0_3;

	cvta.to.global.u64 	%rd13, %rd5;
	shl.b64 	%rd14, %rd2, 2;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.nc.f32 	%f2, [%rd15];
	cvta.to.global.u64 	%rd16, %rd3;
	shl.b64 	%rd17, %rd1, 2;
	add.s64 	%rd18, %rd16, %rd17;
	st.global.f32 	[%rd18], %f2;

BB0_3:
	ret;
}


`
	copymask_ptx_60 = `
.version 6.3
.target sm_60
.address_size 64

	// .globl	copymask

.visible .entry copymask(
	.param .u64 copymask_param_0,
	.param .u64 copymask_param_1,
	.param .u64 copymask_param_2,
	.param .u64 copymask_param_3,
	.param .u32 copymask_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<19>;


	ld.param.u64 	%rd3, [copymask_param_0];
	ld.param.u64 	%rd4, [copymask_param_1];
	ld.param.u64 	%rd5, [copymask_param_2];
	ld.param.u64 	%rd6, [copymask_param_3];
	ld.param.u32 	%r2, [copymask_param_4];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_3;

	cvta.to.global.u64 	%rd7, %rd6;
	cvt.s64.s32	%rd1, %r1;
	add.s64 	%rd8, %rd7, %rd1;
	ld.global.nc.u8 	%rs1, [%rd8];
	cvt.u64.u16	%rd9, %rs1;
	and.b64  	%rd2, %rd9, 255;
	cvta.to.global.u64 	%rd10, %rd4;
	cvt.u32.u16	%r9, %rs1;
	and.b32  	%r10, %r9, 255;
	mul.wide.u32 	%rd11, %r10, 4;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.nc.f32 	%f1, [%rd12];
	setp.eq.f32	%p2, %f1, 0f00000000;
	@%p2 bra 	BB0_3;

	cvta.to.global.u64 	%rd13, %rd5;
	shl.b64 	%rd14, %rd2, 2;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.nc.f32 	%f2, [%rd15];
	cvta.to.global.u64 	%rd16, %rd3;
	shl.b64 	%rd17, %rd1, 2;
	add.s64 	%rd18, %rd16, %rd17;
	st.global.f32 	[%rd18], %f2;

BB0_3:
	ret;
}


`
	copymask_ptx_61 = `
.version 6.3
.target sm_61
.address_size 64

	// .globl	copymask

.visible .entry copymask(
	.param .u64 copymask_param_0,
	.param .u64 copymask_param_1,
	.param .u64 copymask_param_2,
	.param .u64 copymask_param_3,
	.param .u32 copymask_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<19>;


	ld.param.u64 	%rd3, [copymask_param_0];
	ld.param.u64 	%rd4, [copymask_param_1];
	ld.param.u64 	%rd5, [copymask_param_2];
	ld.param.u64 	%rd6, [copymask_param_3];
	ld.param.u32 	%r2, [copymask_param_4];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_3;

	cvta.to.global.u64 	%rd7, %rd6;
	cvt.s64.s32	%rd1, %r1;
	add.s64 	%rd8, %rd7, %rd1;
	ld.global.nc.u8 	%rs1, [%rd8];
	cvt.u64.u16	%rd9, %rs1;
	and.b64  	%rd2, %rd9, 255;
	cvta.to.global.u64 	%rd10, %rd4;
	cvt.u32.u16	%r9, %rs1;
	and.b32  	%r10, %r9, 255;
	mul.wide.u32 	%rd11, %r10, 4;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.nc.f32 	%f1, [%rd12];
	setp.eq.f32	%p2, %f1, 0f00000000;
	@%p2 bra 	BB0_3;

	cvta.to.global.u64 	%rd13, %rd5;
	shl.b64 	%rd14, %rd2, 2;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.nc.f32 	%f2, [%rd15];
	cvta.to.global.u64 	%rd16, %rd3;
	shl.b64 	%rd17, %rd1, 2;
	add.s64 	%rd18, %rd16, %rd17;
	st.global.f32 	[%rd18], %f2;

BB0_3:
	ret;
}


`
	copymask_ptx_70 = `
.version 6.3
.target sm_70
.address_size 64

	// .globl	copymask

.visible .entry copymask(
	.param .u64 copymask_param_0,
	.param .u64 copymask_param_1,
	.param .u64 copymask_param_2,
	.param .u64 copymask_param_3,
	.param .u32 copymask_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<19>;


	ld.param.u64 	%rd3, [copymask_param_0];
	ld.param.u64 	%rd4, [copymask_param_1];
	ld.param.u64 	%rd5, [copymask_param_2];
	ld.param.u64 	%rd6, [copymask_param_3];
	ld.param.u32 	%r2, [copymask_param_4];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_3;

	cvta.to.global.u64 	%rd7, %rd6;
	cvt.s64.s32	%rd1, %r1;
	add.s64 	%rd8, %rd7, %rd1;
	ld.global.nc.u8 	%rs1, [%rd8];
	cvt.u64.u16	%rd9, %rs1;
	and.b64  	%rd2, %rd9, 255;
	cvta.to.global.u64 	%rd10, %rd4;
	cvt.u32.u16	%r9, %rs1;
	and.b32  	%r10, %r9, 255;
	mul.wide.u32 	%rd11, %r10, 4;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.nc.f32 	%f1, [%rd12];
	setp.eq.f32	%p2, %f1, 0f00000000;
	@%p2 bra 	BB0_3;

	cvta.to.global.u64 	%rd13, %rd5;
	shl.b64 	%rd14, %rd2, 2;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.nc.f32 	%f2, [%rd15];
	cvta.to.global.u64 	%rd16, %rd3;
	shl.b64 	%rd17, %rd1, 2;
	add.s64 	%rd18, %rd16, %rd17;
	st.global.f32 	[%rd18], %f2;

BB0_3:
	ret;
}


`
	copymask_ptx_75 = `
.version 6.3
.target sm_75
.address_size 64

	// .globl	copymask

.visible .entry copymask(
	.param .u64 copymask_param_0,
	.param .u64 copymask_param_1,
	.param .u64 copymask_param_2,
	.param .u64 copymask_param_3,
	.param .u32 copymask_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<19>;


	ld.param.u64 	%rd3, [copymask_param_0];
	ld.param.u64 	%rd4, [copymask_param_1];
	ld.param.u64 	%rd5, [copymask_param_2];
	ld.param.u64 	%rd6, [copymask_param_3];
	ld.param.u32 	%r2, [copymask_param_4];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_3;

	cvta.to.global.u64 	%rd7, %rd6;
	cvt.s64.s32	%rd1, %r1;
	add.s64 	%rd8, %rd7, %rd1;
	ld.global.nc.u8 	%rs1, [%rd8];
	cvt.u64.u16	%rd9, %rs1;
	and.b64  	%rd2, %rd9, 255;
	cvta.to.global.u64 	%rd10, %rd4;
	cvt.u32.u16	%r9, %rs1;
	and.b32  	%r10, %r9, 255;
	mul.wide.u32 	%rd11, %r10, 4;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.nc.f32 	%f1, [%rd12];
	setp.eq.f32	%p2, %f1, 0f00000000;
	@%p2 bra 	BB0_3;

	cvta.to.global.u64 	%rd13, %rd5;
	shl.b64 	%rd14, %rd2, 2;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.nc.f32 	%f2, [%rd15];
	cvta.to.global.u64 	%rd16, %rd3;
	shl.b64 	%rd17, %rd1, 2;
	add.s64 	%rd18, %rd16, %rd17;
	st.global.f32 	[%rd18], %f2;

BB0_3:
	ret;
}


`
)
